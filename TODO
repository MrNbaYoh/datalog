- functorial interface:
module type Symbol =
    sig
        type t
        include Hashtbl.HashedType with type t = t
        val of_string : string -> t
        val to_string : t -> string
    end

module Make(S : Symbol) :
    sig
        type term
        type rule
        type db
        ...


        val mk_term : (S.t * S.t list) -> term
        val mk_rule : term * term list -> rule

        val gc_symbols : unit -> unit  (* clear symbols not in use *)

        (* also, handlers translate back from term/rule to type S.t *)
    end
